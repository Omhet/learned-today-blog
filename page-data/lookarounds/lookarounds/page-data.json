{"componentChunkName":"component---src-templates-blog-post-js","path":"/lookarounds/lookarounds/","webpackCompilationHash":"f377b62e939a8ae2235e","result":{"data":{"site":{"siteMetadata":{"title":"Vladimir Learned Today","author":"Vladimir Ivanov"}},"markdownRemark":{"id":"69dfb257-fb91-539d-84c6-aaf1f81a60a9","excerpt":"Photo by Nathan Anderson on Unsplash In this post, I’ll try to explain by simple examples what the thing is JS RegExp lookarounds. Let’s pretend you need to…","html":"<p><img src=\"https://miro.medium.com/max/12032/0*oOl5lNedjGmeMkyH\" alt=\"Photo by Nathan Anderson on Unsplash\"></p>\n<p>In this post, I’ll try to explain by simple examples what the thing is JS RegExp lookarounds.</p>\n<p>Let’s pretend you need to make a pin-code style text input. Something like this one:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*IJrwi-DxWcuuTonaPQr_gg.png\" alt=\"Simple pin-code style input\"></p>\n<p>Noticed that all digits are dots except the last one? That’s really easy to implement with just one line of code using RegExp lookaround (negative lookahead in this case):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pin.replace(/\\d(?!$)/g, ‘•’)</code></pre></div>\n<p>Well, what just happened here? We’ll figure it out, but firstly let’s review a simpler example.</p>\n<p>We have a Markdown string:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 1 potato for 2€\n- 2 tomatoes for 3€\n- 5 bananas for 4€</code></pre></div>\n<p>Let’s write a code that finds all digits before the euro sign. With lookarounds it can be done like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">str.match(/\\d+(?=€)/g)</code></pre></div>\n<p>Here’s what it means:</p>\n<ul>\n<li><strong>\\d+</strong> One or more digits</li>\n<li><strong>(?=€)</strong> Followed by €</li>\n</ul>\n<p>That’s it! No brainer at all.</p>\n<p>That (<strong>?=</strong>your_regexp) is called a <strong>positive lookahead</strong>. You can interpret this like because it looks ahead with a positive attitude for what goes next.</p>\n<p>In the result you will get an array:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[“2”, “3”, “4”]</code></pre></div>\n<p>Notice that it returned what was before the lookahead, <strong>\\d+</strong> in our case. The € sign itself is not included in the resulting array.</p>\n<p>Now I want to find all digits that are not followed by € sign. That’s also very easy.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">str.match(/\\d+(?!€)/g)</code></pre></div>\n<p>It’s a <strong>negative lookahead</strong>. The main difference is <strong>!</strong> sign instead of <strong>=</strong>.</p>\n<p>So, this one will return quantities:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[“1”, “2”, “5”]</code></pre></div>\n<p>That’s precisely the digits I wanted.</p>\n<p>Now we can go back to our pin code example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pin.replace(/\\d(?!$)/g, ‘•’)</code></pre></div>\n<ul>\n<li><strong>\\d</strong> Just a digit</li>\n<li><strong>(?!$)</strong> Not followed by an end of the line (<strong>$</strong> in regexps is a special char meaning an end of the line)</li>\n</ul>\n<p>Summing it up, find all digits that are not at the end of the line and replace them with ‘•’. Easy!</p>\n<p>Well, if there is a lookahead, there should be a lookbehind probably. And yes, there is one.</p>\n<p>Unlike €, $ is usually written before a digit.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 1 potato for $2\n- 2 tomatoes for $3\n- 5 bananas for $4</code></pre></div>\n<p>To find values now, we need a bit different code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">str.match(/(?&lt;=\\$)\\d+/g)</code></pre></div>\n<p>This is called a <strong>positive lookbehind</strong>. Then escaped <strong>$</strong> sign (because we do not want to consider it as an end of the line, we escape it with a backslash).</p>\n<p>It finds all digits that are preceded by <strong>$</strong> sign.</p>\n<p>On the other hand, there is a (<strong>?&#x3C;!</strong>your_regexp) <strong>negative lookbehind</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">str.match(/(?&lt;!\\$)\\d+/g</code></pre></div>\n<p>Which finds all digits that are not preceded by $ sign.</p>\n<p>To conclude, if you need to find something followed or not followed by something, use these ones:</p>\n<ul>\n<li><strong>Positive lookahead:</strong> (?=your_regexp)</li>\n<li><strong>Negative lookahead:</strong> (?!your_regexp)</li>\n</ul>\n<p>If you need to find something preceded or not preceded by something, use these ones:</p>\n<ul>\n<li><strong>Positive lookbehind:</strong> (?&#x3C;=your_regexp)</li>\n<li><strong>Negative lookbehind:</strong> (?&#x3C;!your_regexp)</li>\n</ul>\n<p>To check all the examples yourself you can use <a href=\"https://regex101.com/\">regex101</a>. It’s a great place to test all your regexps.</p>\n<p><em>P.S. Be careful about using lookbehinds in JS as it has partial support on the moment of writing this post. Check <a href=\"https://caniuse.com/#search=lookbehind\">caniuse</a> to be sure.</em></p>","frontmatter":{"title":"RegExp lookarounds in JavaScript","date":"August 26, 2019","description":"A simple explanation on RegExp lookarounds in JavaScript"},"timeToRead":3}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/lookarounds/lookarounds/","previous":null,"next":null}}}